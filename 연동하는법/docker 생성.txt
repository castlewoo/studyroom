docker 생성

wsl --install
wsl --set-default-version 2
wsl --update
docker version

# 내 컴퓨터에 가상환경을 사용할 수 있는 이미지가 있는지 확인
# 리눅스 종류 중 ubuntu를 사용할 예정

docker search ubuntu

# ubuntu 리눅스 이미지를 다운 : docker pull 이미지명
docker pull ubuntu:20.04

docker login

# pull 한 image 확인
docker images

# docker container 생성 실행
# 컨테이너 실행은 터미널이나 ps 이용하지 않고 vscode나 docker desk에서 실행
# 생성 명령 : docker create 옵션 컨테이너명 이미지명
# 옵션 : -it  -> 컨테이너 실행하고 종료하지 말고 유지 시킬것
#        : --name -> 생성되는 컨테이너의 이름을 부여

docker create -it --name jupyter_ubuntu_20.04 ubuntu:20.04

# docker process 확인
docker ps -a (숨겨진 모든 프로세스 출력)

# 컨테이너 실행
docker start 컨테이너이름 
docker start jupyter_ubuntu_20.04

### docker ubuntu 진입 후 설정
# 패키지 관리자 update
# -y 옵션 : 질문이 나오면 무조건 y를 입력할 것
apt update -y (주로 이걸 사용)
apt upgrade -y

# 필수 모듈(프로그램) 설치
# wget : 다운로드 받을 때 사용
# vim : 편집기 모듈
# unzip : zip 압축파일 압축해제시 사용
# sudo : 일시적으로 관리자권한을 갖게 하는 모듈
# pip : 파이썬 패키지9프로그램) install 하는 모듈

apt install 모듈명1 모듈명2 모듈명3 ... -y (모듈명 쓸때 콤마 없음)
apt install wget vim unzip sudo pip -y

# jupyter notebook 설치
pip install jupyter

# jupyter 설치 확인
jupyter --version

# jupyter 실행 : jupyter 서버 실행
jupyter notebook
# 일반계정이 아닌 root 계정으로 실행할 때에는 
jupyter notebook --allow-root

# 새로운 터미널 추가 : 메뉴 Terminal - new terminal

### 리눅스 필수 기본 명령어
# 현재 시스템에서 사용할 수 있는 shell 프로그램 확인
cat /etc/shells
# 현재 기본값으로 설정되어 있는 사용중인 shell(터미널) 프로그램 확인
echo $SHELL
# ehco : 변수내의 값을 던져줄 것
# $로 시작하는 변수는 환경변수
# 환경변수 : 시스템 어느위치에서나 실행이 가능하도록 시스템 환경에 등록해 놓는 변수(프로그램)

# 계정별 설정 파일
# 리눅스(ubuntu)의 설정파일 : bashrc
# /etc/bashrc : 전역 설정 파일(시스템(전체계정)에 영향을 미치는 설정을 저장
# 없으면 생성해서 사용하면 됨
# 계정별 설정 파일 : 없으면 생성해서 사용하면 됨
# 계정홈/.bashrc
# 계정 홈 : root는 /root 디렉터리, 일반계정은 /home/\
# 파일명 앞에 . 이 있으면 숨김파일이라는 의미
ls -a 로 확인

# 자세하게 보려면
ls -l

## 리눅스 기본 명령어
- pwd : 현재 디렉터리 위치를 반환
- cd : 현재 위치 변경, cd 경로
root@de3041a00c1d:~# = :과 # 사이가 현재 위치
현재 위치가 ~ 이면 계정의 home 디렉터리에 있다는것을 의미
현재 위치가 root@de3041a00c1d:/#     /면 최상위 디렉터리에 있다는 것을 의미

# 현재 계정의 홈디렉터리로 이동
1. cd /root
2. cd ~
3. cd

# 사용자 계정 추가
useradd : 계정과 관련된 디렉터리나 파일들을 자동 생성하지 않음
adduser : 계정과 관련된 디렉터리나 파일들을 자동 생성
: 계정 홈 디렉터리 생성여부

# 사용자 정보 확인
/etc/passwd

# 사용자 정보 수정
usermod -c "Test User" big_hadoop

# 사용자 삭제
userdel 계정명

# 사용자계정변경
su big_hadoop

## file과 관련된 일반 명령어
# 빈 파일 생성
# touch 파일명 : 빈파일 생성
# cat 파일명 : 파일 내용을 출력

# 파일 복사 
cp 원본파일경로및파일명 복사할경로및파일명
cp /etc/hosts hosts

# 현재 디렉터리에 /etc/passwd 파일을 password라는 파일명으로 복사하시오
cp /etc/passwd password
복사는 권한과 관련있을 수 있음(읽기권한과 관련있음)

# 파일 이동
mv 원본파일경로및파일명 복사할경로및파일명
# 아래 이동코드는 경로가 변경되지 않는 코드이므로 파일명만 변경이 됨
mv hosts hosts_1
# 아래 이동코드는 test_dir 밑으로 파일을 이동하라는 명령어
mkdir test_dir
mv hosts test_dir/

# 파일(디렉터리) 삭제
rm 파일명
rm -r 디렉터리명

# 디렉터리 생성 
mkdir 디렉터리명
mkdir test_dir

# /etc/passwd 파일을 현재 디렉터리의 test_dir 밑으로 복사하시오
cp /etc/passwd test_dir/ : /etc/passwd 파일을 현재 디렉터리 밑의 test_dir 디렉터리 밑으로 복사
cp /etc/passwd /test_dir : cp /etc/passwd파일을 / 디렉터리 밑에 test_dir 파일명으로 복사

# test_dir 밑의 passwd 파일을 계정 홈 디렉터리로 이동하시오
- 현재 위치가 계정 홈 디렉터리라면
mv /test_dir/passwd .

- 현재 위치가 계정 홈 디렉터리가 아니면(root 계정일때) : 절대경로 사용
mv /root/test_dir/passwd/root

- 현재 위치가 계정 홈 디렉터리가 아니면(lab12 계정일때) : 잘데경로 사용
mv /home/lab12/test_dir/passwd /home/lab12

# 디렉터리 삭제
rm -r 디렉터리명

# test 디렉터리를 생성하고 현재 위치의 passwd 파일을 test 디렉터리로 이동하시오
mkdir test            mv passwd test/
# test 디렉터리를 삭제하시오
rm -r test

# 파일 권한
-         rw-           r--                        r--
파일종류    파일소유자권한   소유자가 속해있는 그룹의 권한  그외 사용자 권한

# 파일종류
-: 일반 텍스트 파일
d: 디렉터리

# 그외 권한
r : read
w : write
x : execute(실행)
- : 권한이 없음

rw- : 읽고 쓸수있는 권한
r-- : 읽기 권한만 있음
r-x : 읽고 실행할 수 있는 권한

# 파일 권한 변경
chmod 사용
rw- : 110 => 
r-- : 100
r-x : 101
rwx : 111

# 생성한 디렉터리 test에 모든 계정이 읽고 쓰고 실행이 가능하게 권한 변경
# 파일의 소유자가 변경할 수 있음
chmod 777 test

현재 소유하고 있는 파일 password 파일에 대해서 모든 사용자가 읽고 쓰기가 가능하게 권한을 변경하시오
chmod 666 password

# test 디렉터리에 대해 기본 권한으로 변경
# 디렉터리 기본 권한 rwxr-xr-x

# password 파일에 대해 기본 권한으로 변경
# 일반 파일의 기본권한 rw-r--r--

# vim 또는 vi 편집기 사용 명령어
# 편집기 사용
vim password
vi password

# 현재 상태 벗어날때 esc 를 사용
# 수정 상태 : esc - i
# 명령 상태 : esc - : - w(저장) - q(종료)
# 명령 상태 : esc - : - q  -> 저장 없이 종료(변경하지 않았을때)
# 변경
esc - i
# 변경 내용 저장 후 종료
esc-:wq
# 변경했는데 변경내용 반영 없이 종료
esc-:q!
# 변경안하고 그냥 종료
esc - :q

# 계정별 폰트 설정
1. 계정 폰트 폴더 생성
mkdir ~/.local/share/fonts

2. 관련 폰트 다운로드

3. 폰트 관리자 설치

4. 추가된 폰트 확인
fc-list : 모든 폰트가 출력
fc-list | grep "D2Coding"   -> 출력된 폰트에서 폰트명에 D2Coding이 포함된 것만 출력

5. 추가된 폰트 반영
fc-cache -v

# 주피터노트북 설정파일 생성
jupyter notebook --generate-config

# 노트북 폰트등 custion 설정 : custom 디렉터리안에 custom.css
cd .jupyter 
mkdir custiom

# custom.css 파일 생성 -> 주피터 노트북 디자인과 관련된 설정
cd custom
vim custom.css

# 주피터노트북 열때 루트도 사용가능하게
# 관련 포트 수정
# 시작 경로 변경
jupyter_norebook_config.py 